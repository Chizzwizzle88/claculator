#CS 30 final project
#Charlie Parks
#Practical Python Graphing calculator with visual output

#importing environments
from matplotlib import pyplot as plt
import numpy as np
from tkinter import *
from tkinter import ttk

#defining global function variable
expression = ""

def a():
"""This function is for the regular calculations mode of the calculator"""

    def press(num):#these define the button presses
        
        global expression
     
        
        expression = expression + str(num)
     
       
        equation.set(expression)
     
     
    
    def equalpress():
        
        try:
     
            global expression
     
            total = str(eval(expression))
     
            equation.set(total)
     
            expression = ""
     
        except:
     
            equation.set(" error ")
            expression = ""
    
    def clear():
        global expression
        expression = ""
        equation.set("")
     
     
    if __name__ == "__main__":#creates the gui
        
        gui = Tk()
     
        
        gui.configure(background="blue")
     
       
        gui.title("a")
     
        
        gui.geometry("270x150")
     
        equation = StringVar()
    
        expression_field = Entry(gui, textvariable=equation)
     
        expression_field.grid(columnspan=4, ipadx=70)
     
        button1 = Button(gui, text=' 1 ', fg='white', bg='black',
                        command=lambda: press(1), height=1, width=7)
        button1.grid(row=2, column=0)
     
        button2 = Button(gui, text=' 2 ', fg='white', bg='black',
                        command=lambda: press(2), height=1, width=7)
        button2.grid(row=2, column=1)
     
        button3 = Button(gui, text=' 3 ', fg='white', bg='black',
                        command=lambda: press(3), height=1, width=7)
        button3.grid(row=2, column=2)
     
        button4 = Button(gui, text=' 4 ', fg='white', bg='black',
                        command=lambda: press(4), height=1, width=7)
        button4.grid(row=3, column=0)
     
        button5 = Button(gui, text=' 5 ', fg='white', bg='black',
                        command=lambda: press(5), height=1, width=7)
        button5.grid(row=3, column=1)
     
        button6 = Button(gui, text=' 6 ', fg='white', bg='black',
                        command=lambda: press(6), height=1, width=7)
        button6.grid(row=3, column=2)
     
        button7 = Button(gui, text=' 7 ', fg='white', bg='black',
                        command=lambda: press(7), height=1, width=7)
        button7.grid(row=4, column=0)
     
        button8 = Button(gui, text=' 8 ', fg='white', bg='black',
                        command=lambda: press(8), height=1, width=7)
        button8.grid(row=4, column=1)
     
        button9 = Button(gui, text=' 9 ', fg='white', bg='black',
                        command=lambda: press(9), height=1, width=7)
        button9.grid(row=4, column=2)
     
        button0 = Button(gui, text=' 0 ', fg='white', bg='black',
                        command=lambda: press(0), height=1, width=7)
        button0.grid(row=5, column=0)
     
        plus = Button(gui, text=' + ', fg='white', bg='black',
                    command=lambda: press("+"), height=1, width=7)
        plus.grid(row=2, column=3)
     
        minus = Button(gui, text=' - ', fg='white', bg='black',
                    command=lambda: press("-"), height=1, width=7)
        minus.grid(row=3, column=3)
     
        multiply = Button(gui, text=' * ', fg='white', bg='black',
                        command=lambda: press("*"), height=1, width=7)
        multiply.grid(row=4, column=3)
     
        divide = Button(gui, text=' / ', fg='white', bg='black',
                        command=lambda: press("/"), height=1, width=7)
        divide.grid(row=5, column=3)
     
        equal = Button(gui, text=' = ', fg='white', bg='black',
                    command=equalpress, height=1, width=7)
        equal.grid(row=5, column=2)
     
        clear = Button(gui, text='Clear', fg='white', bg='black',
                    command=clear, height=1, width=7)
        clear.grid(row=5, column='1')
     
        Decimal= Button(gui, text='.', fg='white', bg='black',
                        command=lambda: press('.'), height=1, width=7)
        Decimal.grid(row=6, column=0)
        
        gui.mainloop()
        
def c():
   """This function makes the graphing part"""
    
    def m2py(fom):#this imports the different trig and other functions
        fom = fom.replace("^","**")
        fom = fom.replace("sin","np.sin")
        fom = fom.replace("cos","np.cos")
        fom = fom.replace("tan","np.tan")
        fom = fom.replace("pi","np.pi")
        fom = fom.replace("e","np.e")
        fom = fom.replace("ln","np.log")
        return fom


    def graph():#creates the graph visually
        formula = m2py(str(eqnERY.get()))
        x = np.arange(eval(x_minERY.get()),eval(x_maxERY.get()),0.01)
        y = eval(formula)
        ax = plt.gca()
        ax.set_ylim([eval(y_minERY.get()),eval(y_maxERY.get())])
        
        plt.axhline(linewidth=2, y=0, color='black')
        plt.axvline(linewidth=2, x=0, color='black')

        if 'x' not in formula:
            plt.axhline(y=eval(formula))
        else:
            utol = 100.
            ltol = -100.
            y[y>utol] = np.inf
            y[y<ltol] = -np.inf 
            plt.plot(x,y)
        
        plt.grid(linestyle="--")
        plt.show()

    def useDefault():
        x_minERY.delete(0,END)
        x_maxERY.delete(0,END)
        y_minERY.delete(0,END)
        y_maxERY.delete(0,END)

        x_minERY.insert(0,-10)
        x_maxERY.insert(0,10)
        y_minERY.insert(0,-10)
        y_maxERY.insert(0,10)

    root = Tk()
    root.title("Graphing Calculator")
    root.option_add("*Font", "courier 36")
    root.resizable(False, False)

    style = ttk.Style() 
    style.configure('TButton', font = ('courier', 28, 'bold'))

    eqnLBL = ttk.Label(root,text="y =")
    eqnERY = ttk.Entry(root)

    defaultBTN = ttk.Button(root, text="Use Default Limits", command=useDefault)

    x_minLBL = ttk.Label(root, text="x min:")
    x_minERY = ttk.Entry(root, width=5)

    x_maxLBL = ttk.Label(root, text="x max:")
    x_maxERY = ttk.Entry(root, width=5)

    y_minLBL = ttk.Label(root, text="y min:")
    y_minERY = ttk.Entry(root, width=5)

    y_maxLBL = ttk.Label(root, text="y max:")
    y_maxERY = ttk.Entry(root, width=5)

    button = ttk.Button(root, text="PLOT", style="TButton", command=graph)

    # Place all widgets on the grid

    eqnLBL.grid(row=1,column=0, pady=10)
    eqnERY.grid(row=1,column=1, pady=10)
    defaultBTN.grid(row=0, column=0, columnspan=2, sticky=N, pady=(0,15))
    button.grid(row=6,column=0, columnspan=2,sticky=N+S+W+E, pady=(30,0))

    x_minLBL.grid(row=2,column=0, pady=10)
    x_minERY.grid(row=2,column=1, sticky=W, pady=10)

    x_maxLBL.grid(row=3,column=0, pady=10)
    x_maxERY.grid(row=3,column=1, sticky=W, pady=10)

    y_minLBL.grid(row=4,column=0, pady=10)
    y_minERY.grid(row=4,column=1, sticky=W, pady=10)

    y_maxLBL.grid(row=5,column=0, pady=10)
    y_maxERY.grid(row=5,column=1, sticky=W, pady=10)

    root.mainloop()

def b():
    """This Checks the user input to choose the calculation type"""
   
     while True:#makes continuous
        
        print("Please choose a mode from the list below:")#prints menu
        print("1. Simple Calculator(C)")
        print("2. Graph Plotter(G)")
        print("Enter 'Q'to close")        
        
        z = input("Enter your choice:")

        try:
            x = z.lower()#elifs to call different calculators
            
            if x == "c":#calls regular calculator
                a()
            elif x == "g":#calls graph calculator
                c()
            elif x == "q":#responds to quit command
                break
            else:
                print("Please enter either 'c' or 'g'")
        except:
            print("Please try again")
     
b()#calls the option menu 
